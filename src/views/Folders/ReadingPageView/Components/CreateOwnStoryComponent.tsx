import { GoogleGenerativeAI } from "@google/generative-ai";
import Button from "../../../../shared/components/Button"
import { Colors } from "../../../../shared/Enums/Stylings"
import { useState } from "react";
import { toast } from "react-toastify";
import { RootState, useCreateStoryMutation } from "../../../../shared/store";
import { IStory } from "../../../../shared/store/slices/UserSlice";
import { useSelector } from "react-redux";

interface IProps{
    level: string,
    language: string,
}

function CreateOwnStoryComponent({level,language}:IProps){
   const user = useSelector((state: RootState) => state.userProfile);
   const [createStory] = useCreateStoryMutation();
   const [generatedTitle, setGeneratedTitle] = useState<string>("");
   const [generatedStory, setGeneratedStory] = useState<string>();
   const [generatedDescription, setGeneratedDescription] = useState<string>("");
   const [isLoading, setIsLoading] = useState<boolean>(false);
   const apikey = process.env.REACT_APP_GEMINI_API_KEY;

       //AI stuff
   let genAI;
   if (apikey !== undefined) {
     genAI = new GoogleGenerativeAI(apikey);
   }
   const model = genAI?.getGenerativeModel({
    model: "gemini-1.5-flash-8b",
  });

  //sets 'translationWord' generated by AI
  const generateStory = async () => {
    let title = "";
    let story="";
    let description="";
    let error= false;
    if(model){
      setIsLoading(true)
      console.log("Czarek właśnie generuje dla Ciebie historie w języku "+language+" na poziomie "+ level + ":")
      await model.generateContent("Stwórz pojedynczy tytuł prostej codziennej historyjki. Tytył musi być w języku "+language+". Historia ta będzie na poziomie "+level+ ".Tytuł musi być unikalny").then(
        (response) =>{
          const responseTitle = response.response;
          title = responseTitle.text().toString();
          console.log(title);
        }
      ).catch((err)=>{
        toast.error("Czarek jest obecnie przeciążony. Spróbuj ponownie za chwilę!");
        error=true;
      });

      if(error) return;
      await model.generateContent("generate story in "+language+" language at "+level+" level. The story will be about "+title).then((response)=>{
        const responseStory = response.response;
        story = responseStory.text().toString();
        console.log(story)
      }).catch((err)=>{
        toast.error("Czarek jest obecnie przeciążony. Spróbuj ponownie za chwilę!");
        error=true;
      });;

      if(error) return;
      await model.generateContent("generate very short description, in "+ language +" for this story: "+ story).then((response)=>{
        const responseDescription = response.response;
        description = responseDescription.text().toString();
        console.log(description)  
      }).catch((err)=>{
        toast.error("Czarek jest obecnie przeciążony. Spróbuj ponownie za chwilę!");
        error=true;
      });;

      if(error) return;
      setGeneratedTitle(title);
      setGeneratedStory(story);
      setGeneratedDescription(description)
      setIsLoading(false);
    }


  }

  const onCreateStory = async (newStory: IStory) => {
    return await createStory({newStory: newStory,userID:user.value})
      .unwrap()
      .then(() => {
        toast.success("Pomyślnie utworzono historie!");
      }).catch(() => {
        toast.error("Błąd podczas tworzenia historii!");
      });
  };

    return (
      <div className="flex px-4 justify-center items-center pt-2">
        {generatedDescription === "" ? (
          <>
          {isLoading ? (
              <div>Ładowanie...</div>
            ) : (          <Button onClick={generateStory} bgColor={Colors.SECONDARY}>
              Wygeneruj własną historię
            </Button>)}
          </>
        ) : (
          <>
            {isLoading ? (
              <div>Ładowanie...</div>
            ) : (
              <div className="flex flex-col gap-1 font-inter">
                <h1 className="text-xl font-inter font-bold">Podgląd:</h1>
                <span>Tytuł:{generatedTitle}</span>
                <span>Historia:{generatedStory?.slice(0,100)+"..."}</span>
                <span>Opis:{generatedDescription}</span>
                <Button onClick={generateStory} bgColor={Colors.SECONDARY}>
                  Wygeneruj ponownie
                </Button>
                <Button onClick={() => {

                  onCreateStory({id: 9, language: language, level: level, title: generatedTitle, words: [], wordsAmount: 0, wordKnownAmount:0 });
                }} bgColor={Colors.SECONDARY}>
                  Dodaj do kolekcji
                </Button>
              </div>
            )}
          </>
        )}
      </div>
    );
}

export default CreateOwnStoryComponent